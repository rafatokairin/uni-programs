IDENTIFIER(foo)
L_PAREN
IDENTIFIER(a)
R_PAREN
L_CURLY_BRACKET
INT
IDENTIFIER(b)
ASSIGN
IDENTIFIER(a)
PLUS
NUM_INTEGER(1)
SEMICOLON
INT
IDENTIFIER(c)
ASSIGN
L_PAREN
IDENTIFIER(short)
R_PAREN
IDENTIFIER(a)
SEMICOLON
IF
L_PAREN
IDENTIFIER(b)
R_PAREN
RETURN
IDENTIFIER(b)
SEMICOLON
RETURN
NUM_INTEGER(1)
SEMICOLON
R_CURLY_BRACKET
VOID
MULTIPLY
IDENTIFIER(algoritmo)
L_PAREN
CHAR
MULTIPLY
STRING(oi)
R_PAREN
L_CURLY_BRACKET
INT
IDENTIFIER(i)
ASSIGN
STRING(SkyNet online)
PLUS
NUM_INTEGER(666)
error:lexical:12:35: @
STRING(you are terminated)
SEMICOLON
SWITCH
L_PAREN
DEFAULT
R_PAREN
L_CURLY_BRACKET
CASE
NUM_INTEGER(77)
COLON
STRING(do something)
SEMICOLON
BREAK
SEMICOLON
CASE
NUM_INTEGER(666)
COLON
IDENTIFIER(segmentation_fault)
INC
SEMICOLON
BREAK
SEMICOLON
DEFAULT
COLON
INC
IDENTIFIER(error_level)
INC
SEMICOLON
R_CURLY_BRACKET
FOR
L_PAREN
SEMICOLON
SEMICOLON
R_PAREN
L_CURLY_BRACKET
SEMICOLON
SEMICOLON
SEMICOLON
R_CURLY_BRACKET
IDENTIFIER(i)
TERNARY_CONDITIONAL
L_PAREN
NUM_INTEGER(3)
GREATER_THAN
NUM_INTEGER(4)
R_PAREN
NUM_INTEGER(7)
COLON
NUM_INTEGER(8)
SEMICOLON
IDENTIFIER(a)
POINTER
IDENTIFIER(t)
ASSIGN
IDENTIFIER(i)
L_SQUARE_BRACKET
PLUS
NUM_INTEGER(666)
MULTIPLY
STRING(blabla)
R_SQUARE_BRACKET
L_SQUARE_BRACKET
NUM_INTEGER(45)
R_SQUARE_BRACKET
SEMICOLON
WHILE
L_PAREN
IDENTIFIER(i)
ASSIGN
IDENTIFIER(j)
GREATER_EQUAL
NUM_INTEGER(6)
LESS_EQUAL
NUM_INTEGER(7)
R_PAREN
L_CURLY_BRACKET
SEMICOLON
SEMICOLON
SEMICOLON
R_CURLY_BRACKET
R_CURLY_BRACKET
INT
IDENTIFIER(funcao)
L_PAREN
INT
IDENTIFIER(a)
COMMA
CHAR
IDENTIFIER(b)
R_PAREN
L_CURLY_BRACKET
INT
IDENTIFIER(i)
SEMICOLON
CHAR
IDENTIFIER(c)
SEMICOLON
NUM_OCTAL(07)
PLUS
NUM_INTEGER(08)
PLUS
NUM_INTEGER(007)
PLUS
NUM_INTEGER(008)
PLUS
NUM_HEXA(0x9)
PLUS
NUM_HEXA(0X9)
SEMICOLON
IDENTIFIER(c)
ASSIGN
MULTIPLY
IDENTIFIER(funcao)
PLUS
STRING(oi mundo)
SEMICOLON
RETURN
L_PAREN
NUM_HEXA(0xa)
PLUS
NUM_HEXA(0XA)
PLUS
NUM_INTEGER(007)
PLUS
NUM_OCTAL(07)
R_PAREN
SEMICOLON
R_CURLY_BRACKET
warning:43:1: '/*' within block comment
warning:47:6: '/*' within block comment
warning:47:10: '/*' within block comment
warning:47:14: '/*' within block comment
warning:48:6: '/*' within block comment
warning:58:4: '/*' within block comment
VOID
IDENTIFIER(blabla)
L_PAREN
R_PAREN
L_CURLY_BRACKET
INT
IDENTIFIER(Nome_De_Variavel_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
COMMA
IDENTIFIER(Nome_De_Variavel_2_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
COMMA
error:lexical:68:1: identifier too long
COMMA
error:lexical:69:1: identifier too long
SEMICOLON
IF
L_PAREN
NUM_INTEGER(1)
R_PAREN
L_CURLY_BRACKET
IDENTIFIER(ff)
ASSIGN
L_PAREN
INT
R_PAREN
NUM_INTEGER(23)
DIV
MULTIPLY
IDENTIFIER(i)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\a)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\b)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\f)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\n)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\r)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\t)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\v)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\\)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\')
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\")
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\?)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(\0)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(!)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(@)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(#)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER($)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(%)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(^)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(&)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(*)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(()
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER())
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(_)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(?)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER( )
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(+)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(-)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(/)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(.)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(:)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(;)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(<)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(=)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(>)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(,)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER([)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(])
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(})
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER({)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(`)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(~)
SEMICOLON
IDENTIFIER(ch)
ASSIGN
CHARACTER(|)
SEMICOLON
error:lexical:127:11: unterminated comment